using UnityEngine;
using System.Collections.Generic;

public class Board : MonoBehaviour {
    public int width;
    public int height;
    public GameObject[] gemPrefabs;
    private Gem[,] gems;

    void Start () {
        gems = new Gem[width, height];
        for (int i = 0; i < width; i++) {
            for (int j = 0; j < height; j++) {
                GameObject randomGem = gemPrefabs[Random.Range(0, gemPrefabs.Length)];
                GameObject gemObject = Instantiate(randomGem, new Vector3(i, j, 0), Quaternion.identity) as GameObject;
                gems[i,j] = gemObject.GetComponent<Gem>();
                gems[i,j].x = i;
                gems[i,j].y = j;
            }
        }
    }

    void Update () {
        // Check for matches and update the board accordingly
        List<Gem> matches = FindMatches();
        if (matches.Count > 0) {
            RemoveMatches(matches);
            ApplyGravity();
            FillEmptySpaces();
        }
    }

    private List<Gem> FindMatches() {
        List<Gem> matches = new List<Gem>();
        for (int i = 0; i < width; i++) {
            for (int j = 0; j < height; j++) {
                Gem gem = gems[i,j];
                if (gem != null) {
                    List<Gem> horizontalMatches = FindHorizontalMatches(gem);
                    List<Gem> verticalMatches = FindVerticalMatches(gem);
                    if (horizontalMatches.Count >= 3) {
                        matches.AddRange(horizontalMatches);
                    }
                    if (verticalMatches.Count >= 3) {
                        matches.AddRange(verticalMatches);
                    }
                }
            }
        }
        return matches;
    }

    private List<Gem> FindHorizontalMatches(Gem gem) {
        List<Gem> horizontalMatches = new List<Gem>();
        horizontalMatches.Add(gem);
        for (int i = gem.x - 1; i >= 0; i--) {
            Gem otherGem = gems[i,gem.y];
            if (otherGem != null && otherGem.gemType == gem.gemType) {
                horizontalMatches.Add(otherGem);
            } else {
                break;
            }
        }
        for (int i = gem.x + 1; i < width; i++) {
            Gem otherGem = gems[i,gem.y];
            if (otherGem != null && otherGem.gemType == gem.gemType) {
                horizontalMatches.Add(otherGem);
            } else {
                break;
            }
        }
        return horizontalMatches;
    }

    private List<Gem> FindVerticalMatches(Gem gem) {
        List<Gem> verticalMatches = new List<Gem>();
        verticalMatches.Add(gem);
        for (int j = gem.y - 1; j >= 0; j--) {
            Gem otherGem = gems[gem.x,j];
            if (otherGem != null && otherGem.gemType == gem.gemType) {
                verticalMatches.Add(otherGem);
            } else {
                break;
            }
        }
        for (int j = gem.y + 1; j < height; j++) {
            Gem otherGem = gems[gem.x,j];
            if (otherGem != null && otherGem.gemType == gem.gemType) {
                verticalMatches.Add(otherGem);
            } else {
                break;
            }
        }
        return verticalMatches;
    }

    private void RemoveMatches(List<Gem> matches) {
